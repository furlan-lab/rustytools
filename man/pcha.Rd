% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pcha.R
\name{pcha}
\alias{pcha}
\title{Principal Convex Hull Analysis via Rust PCHA}
\usage{
pcha(
  input_mat,
  noc,
  c_init = NULL,
  s_init = NULL,
  max_iter = 750L,
  conv_crit = 1e-06,
  calc_t_ratio = F
)
}
\arguments{
\item{input_mat}{A numeric matrix of size \eqn{p\times n}, where \code{p}
is the number of features (rows) and \code{n} the number of samples.}

\item{c_init}{Optional numeric matrix of size \code{n x k} giving an
initial guess for the archetype coefficients \code{C}.  Pass
\code{NULL} (the default) to let PCHA pick its own seed.}

\item{s_init}{Optional numeric matrix of size \code{k x n} giving an
initial guess for the cell‐to‐archetype weights \code{S}.  Pass
\code{NULL} (the default) to let PCHA pick its own seed.}

\item{max_iter}{maximum number of PCHA updates (default 750)}

\item{conv_crit}{convergence threshold on relative ΔSSE (default 1e-6)}

\item{calc_t_ratio}{Boolean; should t-ratio be calculated}

\item{k}{Integer; the number of archetypes \eqn{k} to fit
(\code{1 <= k <= n}).}
}
\value{
A named list with components
\describe{
\item{\code{C}}{An \code{n x k} matrix of archetype coefficients.}
\item{\code{S}}{A \code{k x n} matrix of sample weights.}
\item{\code{XC}}{A \code{p x k} matrix of fitted archetype profiles.}
\item{\code{sse}}{The final residual sum‐of‐squares.}
\item{\code{varExpl}}{The fraction of variance explained,
\eqn{(SST - SSE)/SST}.}
}
}
\description{
Fit archetypes to your data using the fast Rust implementation of
Principal Convex Hull Analysis (PCHA).  Optionally you can warm‐start
the solver by providing initial \code{C} and \code{S} matrices.
}
\examples{
\dontrun{
# simulate toy data
set.seed(1)
X <- matrix(rexp(60*300), nrow = 60, ncol = 300)

# fit 5 archetypes
res <- pcha_rust(X, k = 5)

# warm‐start with C0 and S0
C0 <- matrix(0, ncol(X), 5)
C0[sample(ncol(X),5) + 5*seq_len(5) - 5] <- 1
S0 <- matrix(runif(5*ncol(X)), 5, ncol(X))
res2 <- pcha_rust(X, k = 5, c_init = C0, s_init = S0)
}
}
